// source: account_manager.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ChangePlanRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ChangePlanResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.GetPlanRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.GetPlanResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListInvoicesRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListInvoicesResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListPlansRequest', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.ListPlansResponse', null, global);
goog.exportSymbol('proto.fonoster.account_manager.v1beta1.Plan', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.Plan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.Plan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.Plan.displayName = 'proto.fonoster.account_manager.v1beta1.Plan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ChangePlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ChangePlanRequest.displayName = 'proto.fonoster.account_manager.v1beta1.ChangePlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ChangePlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ChangePlanResponse.displayName = 'proto.fonoster.account_manager.v1beta1.ChangePlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.GetPlanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.GetPlanRequest.displayName = 'proto.fonoster.account_manager.v1beta1.GetPlanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.GetPlanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.GetPlanResponse.displayName = 'proto.fonoster.account_manager.v1beta1.GetPlanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListPlansRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListPlansRequest.displayName = 'proto.fonoster.account_manager.v1beta1.ListPlansRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.account_manager.v1beta1.ListPlansResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListPlansResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListPlansResponse.displayName = 'proto.fonoster.account_manager.v1beta1.ListPlansResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.displayName = 'proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.displayName = 'proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.displayName = 'proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListInvoicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.displayName = 'proto.fonoster.account_manager.v1beta1.ListInvoicesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.repeatedFields_, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListInvoicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.displayName = 'proto.fonoster.account_manager.v1beta1.ListInvoicesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.displayName = 'proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.displayName = 'proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.displayName = 'proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.Plan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.Plan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.Plan.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recurringType: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.Plan}
 */
proto.fonoster.account_manager.v1beta1.Plan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.Plan;
  return proto.fonoster.account_manager.v1beta1.Plan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.Plan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.Plan}
 */
proto.fonoster.account_manager.v1beta1.Plan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecurringType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.Plan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.Plan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.Plan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecurringType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string currency = 5;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string recurring_type = 6;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.getRecurringType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.Plan} returns this
 */
proto.fonoster.account_manager.v1beta1.Plan.prototype.setRecurringType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ChangePlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    planRef: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ChangePlanRequest;
  return proto.fonoster.account_manager.v1beta1.ChangePlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ChangePlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string plan_ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.prototype.getPlanRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ChangePlanRequest.prototype.setPlanRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ChangePlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plan: (f = msg.getPlan()) && proto.fonoster.account_manager.v1beta1.Plan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ChangePlanResponse;
  return proto.fonoster.account_manager.v1beta1.ChangePlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.account_manager.v1beta1.Plan;
      reader.readMessage(value,proto.fonoster.account_manager.v1beta1.Plan.deserializeBinaryFromReader);
      msg.setPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ChangePlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.fonoster.account_manager.v1beta1.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * optional Plan plan = 1;
 * @return {?proto.fonoster.account_manager.v1beta1.Plan}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.getPlan = function() {
  return /** @type{?proto.fonoster.account_manager.v1beta1.Plan} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.account_manager.v1beta1.Plan, 1));
};


/**
 * @param {?proto.fonoster.account_manager.v1beta1.Plan|undefined} value
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse} returns this
*/
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.setPlan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.account_manager.v1beta1.ChangePlanResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.clearPlan = function() {
  return this.setPlan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.account_manager.v1beta1.ChangePlanResponse.prototype.hasPlan = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.GetPlanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    planRef: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanRequest}
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.GetPlanRequest;
  return proto.fonoster.account_manager.v1beta1.GetPlanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanRequest}
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.GetPlanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlanRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string plan_ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.prototype.getPlanRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.GetPlanRequest.prototype.setPlanRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.GetPlanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plan: (f = msg.getPlan()) && proto.fonoster.account_manager.v1beta1.Plan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanResponse}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.GetPlanResponse;
  return proto.fonoster.account_manager.v1beta1.GetPlanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanResponse}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.account_manager.v1beta1.Plan;
      reader.readMessage(value,proto.fonoster.account_manager.v1beta1.Plan.deserializeBinaryFromReader);
      msg.setPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.GetPlanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPlanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.fonoster.account_manager.v1beta1.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * optional Plan plan = 1;
 * @return {?proto.fonoster.account_manager.v1beta1.Plan}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.getPlan = function() {
  return /** @type{?proto.fonoster.account_manager.v1beta1.Plan} */ (
    jspb.Message.getWrapperField(this, proto.fonoster.account_manager.v1beta1.Plan, 1));
};


/**
 * @param {?proto.fonoster.account_manager.v1beta1.Plan|undefined} value
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanResponse} returns this
*/
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.setPlan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPlanResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.clearPlan = function() {
  return this.setPlan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.account_manager.v1beta1.GetPlanResponse.prototype.hasPlan = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListPlansRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansRequest}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListPlansRequest;
  return proto.fonoster.account_manager.v1beta1.ListPlansRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansRequest}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListPlansRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.account_manager.v1beta1.ListPlansRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListPlansResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.fonoster.account_manager.v1beta1.Plan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansResponse}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListPlansResponse;
  return proto.fonoster.account_manager.v1beta1.ListPlansResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansResponse}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.account_manager.v1beta1.Plan;
      reader.readMessage(value,proto.fonoster.account_manager.v1beta1.Plan.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListPlansResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPlansResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.account_manager.v1beta1.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plan plans = 1;
 * @return {!Array<!proto.fonoster.account_manager.v1beta1.Plan>}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.fonoster.account_manager.v1beta1.Plan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.account_manager.v1beta1.Plan, 1));
};


/**
 * @param {!Array<!proto.fonoster.account_manager.v1beta1.Plan>} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansResponse} returns this
*/
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.setPlansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.account_manager.v1beta1.Plan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.account_manager.v1beta1.Plan}
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.account_manager.v1beta1.Plan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPlansResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPlansResponse.prototype.clearPlansList = function() {
  return this.setPlansList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentType: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest;
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string payment_type = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.getPaymentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.setPaymentType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.clearPaymentType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodRequest.prototype.hasPaymentType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentMethodsList: jspb.Message.toObjectList(msg.getPaymentMethodsList(),
    proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse;
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod;
      reader.readMessage(value,proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.deserializeBinaryFromReader);
      msg.addPaymentMethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardBrand: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardLastFour: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cardExpMonth: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cardExpYear: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod;
  return proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardBrand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardLastFour(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardExpMonth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCardExpYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardBrand();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardLastFour();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCardExpMonth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCardExpYear();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string card_brand = 2;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.getCardBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.setCardBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string card_last_four = 3;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.getCardLastFour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.setCardLastFour = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 card_exp_month = 4;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.getCardExpMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.setCardExpMonth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 card_exp_year = 5;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.getCardExpYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod.prototype.setCardExpYear = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated PaymentMethod payment_methods = 1;
 * @return {!Array<!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod>}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.getPaymentMethodsList = function() {
  return /** @type{!Array<!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod, 1));
};


/**
 * @param {!Array<!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod>} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse} returns this
*/
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.setPaymentMethodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod}
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.addPaymentMethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.PaymentMethod, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.ListPaymentMethodResponse.prototype.clearPaymentMethodsList = function() {
  return this.setPaymentMethodsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListInvoicesRequest;
  return proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoicesList: jspb.Message.toObjectList(msg.getInvoicesList(),
    proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListInvoicesResponse;
  return proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice;
      reader.readMessage(value,proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.deserializeBinaryFromReader);
      msg.addInvoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    paidAmount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice;
  return proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPaidAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPaidAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.getRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.setRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 paid_amount = 3;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.getPaidAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.setPaidAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 created_at = 4;
 * @return {number}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Invoice invoices = 1;
 * @return {!Array<!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice>}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.getInvoicesList = function() {
  return /** @type{!Array<!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice, 1));
};


/**
 * @param {!Array<!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice>} value
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse} returns this
*/
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.setInvoicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice}
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.addInvoices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.Invoice, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fonoster.account_manager.v1beta1.ListInvoicesResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.ListInvoicesResponse.prototype.clearInvoicesList = function() {
  return this.setInvoicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientRef: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest;
  return proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.prototype.getClientRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest} returns this
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyRequest.prototype.setClientRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientRef: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publishableKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse;
  return proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishableKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublishableKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string client_ref = 1;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.getClientRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.setClientRef = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string publishable_key = 2;
 * @return {string}
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.getPublishableKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse} returns this
 */
proto.fonoster.account_manager.v1beta1.GetPublishableKeyResponse.prototype.setPublishableKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.fonoster.account_manager.v1beta1);
